/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package com.android.ranging.generic.proto;

option java_package = "com.android.ranging.generic.proto";
option java_multiple_files = true;

 // Next ID: 14
 message Estimate {
   enum Status {
     UNSPECIFIED = 0;
     // An estimate was successfully computed.
     OK = 1;
     // Could not produce an estimate. For example, no synchronized set of data
     // is available.
     ESTIMATE_NOT_AVAILABLE = 2;
     // The filter has diverged and is attempting to recover.
     RECOVERING = 3;
     // Odometry failed and cannot recover.
     ODOMETRY_ERROR = 4;
     // The beacon is probably moving, and so cannot be tracked.
     BEACON_MOVING_ERROR = 5;
     // The configuration file contains an error and Finder can't be started.
     CONFIGURATION_ERROR = 6;
     // Permissions not granted to required sensors.
     SENSOR_PERMISSION_DENIED = 7;
     UNKNOWN_ERROR = 8;
     // Tracking failed due to insufficient light. This can occur when using
     // camera based odometry. The filter will automatically recover and produce
     // an estimate when possible.
     RECOVERING_FROM_FAILURE_DUE_TO_INSUFFICIENT_LIGHT = 9;
     // Tracking failed due to excessive motion. The filter will automatically
     // recover and produce an estimate when possible.
     RECOVERING_FROM_FAILURE_DUE_TO_EXCESSIVE_MOTION = 10;
     // Tracking failed due to insufficient features in the camera images. This
     // can occur when using camera based odometry. The filter will automatically
     // recover and produce an estimate when possible.
     RECOVERING_FROM_FAILURE_DUE_TO_INSUFFICIENT_FEATURES = 11;
     // Tracking failed because something else is using the camera. Tracking will
     // recover automatically, but with a new origin.
     RECOVERING_FROM_FAILURE_DUE_TO_CAMERA_UNAVAILABILITY = 12;
     // Tracking failed due to a bad odometry state. The filter will
     // automatically recover and produce an estimate when possible.
     RECOVERING_FROM_FAILURE_DUE_TO_BAD_ODOMETRY_STATE = 13;
   }
   Status status = 1;
   double range_m = 2;
   double range_error_std_dev_m = 3;
   // The bearing is with respect to the device Y-axis, positive ccw.
   double bearing_rad = 4;
   // This measure usually increases as you move closer to the beacon.
   double bearing_error_std_dev_rad = 5;
   // This measure does not vary with the distance to the beacon.
   double estimated_beacon_position_error_std_dev_m = 7;
   int64 timestamp_nanos = 6;
 }
